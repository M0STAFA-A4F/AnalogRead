
analogRead_pot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000a68  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000083e  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 04 	call	0x86c	; 0x86c <main>
  64:	0c 94 6f 04 	jmp	0x8de	; 0x8de <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_VidInit>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "ADC_Register.h"

void ADC_VidInit()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	// select AVCC
	CLR_BIT(ADMUX,7);
  74:	a7 e2       	ldi	r26, 0x27	; 39
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e2       	ldi	r30, 0x27	; 39
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8f 77       	andi	r24, 0x7F	; 127
  80:	8c 93       	st	X, r24
	SET_BIT(ADMUX,6);
  82:	a7 e2       	ldi	r26, 0x27	; 39
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e7 e2       	ldi	r30, 0x27	; 39
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	8c 93       	st	X, r24
	
	// Select ADC Right Adjust Result  (ADLAR)
	CLR_BIT(ADMUX,5);
  90:	a7 e2       	ldi	r26, 0x27	; 39
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e7 e2       	ldi	r30, 0x27	; 39
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8f 7d       	andi	r24, 0xDF	; 223
  9c:	8c 93       	st	X, r24
	
	// ADC Enable  (ADEN)
	SET_BIT(ADCSRA,7);
  9e:	a6 e2       	ldi	r26, 0x26	; 38
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e6 e2       	ldi	r30, 0x26	; 38
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	8c 93       	st	X, r24
	
	// ADC Auto Trigger Enable  (ADATE) --> single conversion
	CLR_BIT(ADCSRA,5);
  ac:	a6 e2       	ldi	r26, 0x26	; 38
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e6 e2       	ldi	r30, 0x26	; 38
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8f 7d       	andi	r24, 0xDF	; 223
  b8:	8c 93       	st	X, r24
	
	// ADC Interrupt Flag  (ADIF)
	CLR_BIT(ADCSRA,4);
  ba:	a6 e2       	ldi	r26, 0x26	; 38
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e6 e2       	ldi	r30, 0x26	; 38
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8f 7e       	andi	r24, 0xEF	; 239
  c6:	8c 93       	st	X, r24
	
	// ADC Interrupt Enable (ADIE)
	CLR_BIT(ADCSRA,3);
  c8:	a6 e2       	ldi	r26, 0x26	; 38
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e6 e2       	ldi	r30, 0x26	; 38
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	87 7f       	andi	r24, 0xF7	; 247
  d4:	8c 93       	st	X, r24
	
	// ADC Prescaler Select Bits (ADPS2:0)  --> 8 MHZ
	CLR_BIT(ADCSRA,2);
  d6:	a6 e2       	ldi	r26, 0x26	; 38
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	e6 e2       	ldi	r30, 0x26	; 38
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8b 7f       	andi	r24, 0xFB	; 251
  e2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
  e4:	a6 e2       	ldi	r26, 0x26	; 38
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e6 e2       	ldi	r30, 0x26	; 38
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,0);
  f2:	a6 e2       	ldi	r26, 0x26	; 38
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e6 e2       	ldi	r30, 0x26	; 38
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	8c 93       	st	X, r24
}
 100:	cf 91       	pop	r28
 102:	df 91       	pop	r29
 104:	08 95       	ret

00000106 <ADC_U16ReadData>:

u16 ADC_U16ReadData(u8 Copy_u8ChannelNum)
{
 106:	df 93       	push	r29
 108:	cf 93       	push	r28
 10a:	0f 92       	push	r0
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0b11100000;
 112:	a7 e2       	ldi	r26, 0x27	; 39
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e7 e2       	ldi	r30, 0x27	; 39
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 7e       	andi	r24, 0xE0	; 224
 11e:	8c 93       	st	X, r24
	ADMUX |= Copy_u8ChannelNum;
 120:	a7 e2       	ldi	r26, 0x27	; 39
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e7 e2       	ldi	r30, 0x27	; 39
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	90 81       	ld	r25, Z
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	89 2b       	or	r24, r25
 12e:	8c 93       	st	X, r24
	
	// to start conversion
	SET_BIT(ADCSRA,6);
 130:	a6 e2       	ldi	r26, 0x26	; 38
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	e6 e2       	ldi	r30, 0x26	; 38
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA,4) == 0);
	// clear flag
	SET_BIT(ADCSRA,4);
 13e:	a6 e2       	ldi	r26, 0x26	; 38
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	e6 e2       	ldi	r30, 0x26	; 38
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 61       	ori	r24, 0x10	; 16
 14a:	8c 93       	st	X, r24
	
	// send data
	return ADC;
 14c:	e4 e2       	ldi	r30, 0x24	; 36
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	91 81       	ldd	r25, Z+1	; 0x01
}
 154:	0f 90       	pop	r0
 156:	cf 91       	pop	r28
 158:	df 91       	pop	r29
 15a:	08 95       	ret

0000015c <DIO_VidSetPinDirection>:

#include "DIO_Register.h"


void DIO_VidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Dir)
{
 15c:	df 93       	push	r29
 15e:	cf 93       	push	r28
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	27 97       	sbiw	r28, 0x07	; 7
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
 170:	89 83       	std	Y+1, r24	; 0x01
 172:	6a 83       	std	Y+2, r22	; 0x02
 174:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin >= 0 && Copy_u8Pin <= 7)
 176:	8a 81       	ldd	r24, Y+2	; 0x02
 178:	88 30       	cpi	r24, 0x08	; 8
 17a:	08 f0       	brcs	.+2      	; 0x17e <DIO_VidSetPinDirection+0x22>
 17c:	ea c0       	rjmp	.+468    	; 0x352 <DIO_VidSetPinDirection+0x1f6>
	{
		if(0 == Copy_u8Dir)
 17e:	8b 81       	ldd	r24, Y+3	; 0x03
 180:	88 23       	and	r24, r24
 182:	09 f0       	breq	.+2      	; 0x186 <DIO_VidSetPinDirection+0x2a>
 184:	74 c0       	rjmp	.+232    	; 0x26e <DIO_VidSetPinDirection+0x112>
		{
			switch(Copy_u8Port)
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	28 2f       	mov	r18, r24
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	3f 83       	std	Y+7, r19	; 0x07
 18e:	2e 83       	std	Y+6, r18	; 0x06
 190:	8e 81       	ldd	r24, Y+6	; 0x06
 192:	9f 81       	ldd	r25, Y+7	; 0x07
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	91 05       	cpc	r25, r1
 198:	59 f1       	breq	.+86     	; 0x1f0 <DIO_VidSetPinDirection+0x94>
 19a:	2e 81       	ldd	r18, Y+6	; 0x06
 19c:	3f 81       	ldd	r19, Y+7	; 0x07
 19e:	22 30       	cpi	r18, 0x02	; 2
 1a0:	31 05       	cpc	r19, r1
 1a2:	2c f4       	brge	.+10     	; 0x1ae <DIO_VidSetPinDirection+0x52>
 1a4:	8e 81       	ldd	r24, Y+6	; 0x06
 1a6:	9f 81       	ldd	r25, Y+7	; 0x07
 1a8:	00 97       	sbiw	r24, 0x00	; 0
 1aa:	69 f0       	breq	.+26     	; 0x1c6 <DIO_VidSetPinDirection+0x6a>
 1ac:	d2 c0       	rjmp	.+420    	; 0x352 <DIO_VidSetPinDirection+0x1f6>
 1ae:	2e 81       	ldd	r18, Y+6	; 0x06
 1b0:	3f 81       	ldd	r19, Y+7	; 0x07
 1b2:	22 30       	cpi	r18, 0x02	; 2
 1b4:	31 05       	cpc	r19, r1
 1b6:	89 f1       	breq	.+98     	; 0x21a <DIO_VidSetPinDirection+0xbe>
 1b8:	8e 81       	ldd	r24, Y+6	; 0x06
 1ba:	9f 81       	ldd	r25, Y+7	; 0x07
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	91 05       	cpc	r25, r1
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <DIO_VidSetPinDirection+0x68>
 1c2:	40 c0       	rjmp	.+128    	; 0x244 <DIO_VidSetPinDirection+0xe8>
 1c4:	c6 c0       	rjmp	.+396    	; 0x352 <DIO_VidSetPinDirection+0x1f6>
			{
				case 0: CLR_BIT(DDRA,Copy_u8Pin); break;
 1c6:	aa e3       	ldi	r26, 0x3A	; 58
 1c8:	b0 e0       	ldi	r27, 0x00	; 0
 1ca:	ea e3       	ldi	r30, 0x3A	; 58
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	48 2f       	mov	r20, r24
 1d2:	8a 81       	ldd	r24, Y+2	; 0x02
 1d4:	28 2f       	mov	r18, r24
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 2e       	mov	r0, r18
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_VidSetPinDirection+0x88>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_VidSetPinDirection+0x84>
 1e8:	80 95       	com	r24
 1ea:	84 23       	and	r24, r20
 1ec:	8c 93       	st	X, r24
 1ee:	b1 c0       	rjmp	.+354    	; 0x352 <DIO_VidSetPinDirection+0x1f6>
				case 1: CLR_BIT(DDRB,Copy_u8Pin); break;
 1f0:	a7 e3       	ldi	r26, 0x37	; 55
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	e7 e3       	ldi	r30, 0x37	; 55
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	48 2f       	mov	r20, r24
 1fc:	8a 81       	ldd	r24, Y+2	; 0x02
 1fe:	28 2f       	mov	r18, r24
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 2e       	mov	r0, r18
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_VidSetPinDirection+0xb2>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	0a 94       	dec	r0
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_VidSetPinDirection+0xae>
 212:	80 95       	com	r24
 214:	84 23       	and	r24, r20
 216:	8c 93       	st	X, r24
 218:	9c c0       	rjmp	.+312    	; 0x352 <DIO_VidSetPinDirection+0x1f6>
				case 2: CLR_BIT(DDRC,Copy_u8Pin); break;
 21a:	a4 e3       	ldi	r26, 0x34	; 52
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	e4 e3       	ldi	r30, 0x34	; 52
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	48 2f       	mov	r20, r24
 226:	8a 81       	ldd	r24, Y+2	; 0x02
 228:	28 2f       	mov	r18, r24
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 2e       	mov	r0, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_VidSetPinDirection+0xdc>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	0a 94       	dec	r0
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_VidSetPinDirection+0xd8>
 23c:	80 95       	com	r24
 23e:	84 23       	and	r24, r20
 240:	8c 93       	st	X, r24
 242:	87 c0       	rjmp	.+270    	; 0x352 <DIO_VidSetPinDirection+0x1f6>
				case 3: CLR_BIT(DDRD,Copy_u8Pin); break;
 244:	a1 e3       	ldi	r26, 0x31	; 49
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	e1 e3       	ldi	r30, 0x31	; 49
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	48 2f       	mov	r20, r24
 250:	8a 81       	ldd	r24, Y+2	; 0x02
 252:	28 2f       	mov	r18, r24
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 2e       	mov	r0, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_VidSetPinDirection+0x106>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_VidSetPinDirection+0x102>
 266:	80 95       	com	r24
 268:	84 23       	and	r24, r20
 26a:	8c 93       	st	X, r24
 26c:	72 c0       	rjmp	.+228    	; 0x352 <DIO_VidSetPinDirection+0x1f6>
			}
		}
		else if(1 == Copy_u8Dir)
 26e:	8b 81       	ldd	r24, Y+3	; 0x03
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	09 f0       	breq	.+2      	; 0x276 <DIO_VidSetPinDirection+0x11a>
 274:	6e c0       	rjmp	.+220    	; 0x352 <DIO_VidSetPinDirection+0x1f6>
		{
			switch(Copy_u8Port)
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	28 2f       	mov	r18, r24
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	3d 83       	std	Y+5, r19	; 0x05
 27e:	2c 83       	std	Y+4, r18	; 0x04
 280:	8c 81       	ldd	r24, Y+4	; 0x04
 282:	9d 81       	ldd	r25, Y+5	; 0x05
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	91 05       	cpc	r25, r1
 288:	49 f1       	breq	.+82     	; 0x2dc <DIO_VidSetPinDirection+0x180>
 28a:	2c 81       	ldd	r18, Y+4	; 0x04
 28c:	3d 81       	ldd	r19, Y+5	; 0x05
 28e:	22 30       	cpi	r18, 0x02	; 2
 290:	31 05       	cpc	r19, r1
 292:	2c f4       	brge	.+10     	; 0x29e <DIO_VidSetPinDirection+0x142>
 294:	8c 81       	ldd	r24, Y+4	; 0x04
 296:	9d 81       	ldd	r25, Y+5	; 0x05
 298:	00 97       	sbiw	r24, 0x00	; 0
 29a:	61 f0       	breq	.+24     	; 0x2b4 <DIO_VidSetPinDirection+0x158>
 29c:	5a c0       	rjmp	.+180    	; 0x352 <DIO_VidSetPinDirection+0x1f6>
 29e:	2c 81       	ldd	r18, Y+4	; 0x04
 2a0:	3d 81       	ldd	r19, Y+5	; 0x05
 2a2:	22 30       	cpi	r18, 0x02	; 2
 2a4:	31 05       	cpc	r19, r1
 2a6:	71 f1       	breq	.+92     	; 0x304 <DIO_VidSetPinDirection+0x1a8>
 2a8:	8c 81       	ldd	r24, Y+4	; 0x04
 2aa:	9d 81       	ldd	r25, Y+5	; 0x05
 2ac:	83 30       	cpi	r24, 0x03	; 3
 2ae:	91 05       	cpc	r25, r1
 2b0:	e9 f1       	breq	.+122    	; 0x32c <DIO_VidSetPinDirection+0x1d0>
 2b2:	4f c0       	rjmp	.+158    	; 0x352 <DIO_VidSetPinDirection+0x1f6>
			{
				case 0: SET_BIT(DDRA,Copy_u8Pin); break;
 2b4:	aa e3       	ldi	r26, 0x3A	; 58
 2b6:	b0 e0       	ldi	r27, 0x00	; 0
 2b8:	ea e3       	ldi	r30, 0x3A	; 58
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	48 2f       	mov	r20, r24
 2c0:	8a 81       	ldd	r24, Y+2	; 0x02
 2c2:	28 2f       	mov	r18, r24
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 2e       	mov	r0, r18
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_VidSetPinDirection+0x176>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	0a 94       	dec	r0
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_VidSetPinDirection+0x172>
 2d6:	84 2b       	or	r24, r20
 2d8:	8c 93       	st	X, r24
 2da:	3b c0       	rjmp	.+118    	; 0x352 <DIO_VidSetPinDirection+0x1f6>
				case 1: SET_BIT(DDRB,Copy_u8Pin); break;
 2dc:	a7 e3       	ldi	r26, 0x37	; 55
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	e7 e3       	ldi	r30, 0x37	; 55
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	48 2f       	mov	r20, r24
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	28 2f       	mov	r18, r24
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 2e       	mov	r0, r18
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_VidSetPinDirection+0x19e>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	0a 94       	dec	r0
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_VidSetPinDirection+0x19a>
 2fe:	84 2b       	or	r24, r20
 300:	8c 93       	st	X, r24
 302:	27 c0       	rjmp	.+78     	; 0x352 <DIO_VidSetPinDirection+0x1f6>
				case 2: SET_BIT(DDRC,Copy_u8Pin); break;
 304:	a4 e3       	ldi	r26, 0x34	; 52
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	e4 e3       	ldi	r30, 0x34	; 52
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	48 2f       	mov	r20, r24
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	28 2f       	mov	r18, r24
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 2e       	mov	r0, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_VidSetPinDirection+0x1c6>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	0a 94       	dec	r0
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_VidSetPinDirection+0x1c2>
 326:	84 2b       	or	r24, r20
 328:	8c 93       	st	X, r24
 32a:	13 c0       	rjmp	.+38     	; 0x352 <DIO_VidSetPinDirection+0x1f6>
				case 3: SET_BIT(DDRD,Copy_u8Pin); break;
 32c:	a1 e3       	ldi	r26, 0x31	; 49
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	e1 e3       	ldi	r30, 0x31	; 49
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	48 2f       	mov	r20, r24
 338:	8a 81       	ldd	r24, Y+2	; 0x02
 33a:	28 2f       	mov	r18, r24
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 2e       	mov	r0, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_VidSetPinDirection+0x1ee>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_VidSetPinDirection+0x1ea>
 34e:	84 2b       	or	r24, r20
 350:	8c 93       	st	X, r24
			}
		}
	}
}
 352:	27 96       	adiw	r28, 0x07	; 7
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	f8 94       	cli
 358:	de bf       	out	0x3e, r29	; 62
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	cd bf       	out	0x3d, r28	; 61
 35e:	cf 91       	pop	r28
 360:	df 91       	pop	r29
 362:	08 95       	ret

00000364 <DIO_VidSetPinValue>:

void DIO_VidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Val)
{
 364:	df 93       	push	r29
 366:	cf 93       	push	r28
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
 36c:	27 97       	sbiw	r28, 0x07	; 7
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	de bf       	out	0x3e, r29	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	cd bf       	out	0x3d, r28	; 61
 378:	89 83       	std	Y+1, r24	; 0x01
 37a:	6a 83       	std	Y+2, r22	; 0x02
 37c:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin >= 0 && Copy_u8Pin <= 7)
 37e:	8a 81       	ldd	r24, Y+2	; 0x02
 380:	88 30       	cpi	r24, 0x08	; 8
 382:	08 f0       	brcs	.+2      	; 0x386 <DIO_VidSetPinValue+0x22>
 384:	ea c0       	rjmp	.+468    	; 0x55a <DIO_VidSetPinValue+0x1f6>
	{
		if(0 == Copy_u8Val)
 386:	8b 81       	ldd	r24, Y+3	; 0x03
 388:	88 23       	and	r24, r24
 38a:	09 f0       	breq	.+2      	; 0x38e <DIO_VidSetPinValue+0x2a>
 38c:	74 c0       	rjmp	.+232    	; 0x476 <DIO_VidSetPinValue+0x112>
		{
			switch(Copy_u8Port)
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	28 2f       	mov	r18, r24
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	3f 83       	std	Y+7, r19	; 0x07
 396:	2e 83       	std	Y+6, r18	; 0x06
 398:	8e 81       	ldd	r24, Y+6	; 0x06
 39a:	9f 81       	ldd	r25, Y+7	; 0x07
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	91 05       	cpc	r25, r1
 3a0:	59 f1       	breq	.+86     	; 0x3f8 <DIO_VidSetPinValue+0x94>
 3a2:	2e 81       	ldd	r18, Y+6	; 0x06
 3a4:	3f 81       	ldd	r19, Y+7	; 0x07
 3a6:	22 30       	cpi	r18, 0x02	; 2
 3a8:	31 05       	cpc	r19, r1
 3aa:	2c f4       	brge	.+10     	; 0x3b6 <DIO_VidSetPinValue+0x52>
 3ac:	8e 81       	ldd	r24, Y+6	; 0x06
 3ae:	9f 81       	ldd	r25, Y+7	; 0x07
 3b0:	00 97       	sbiw	r24, 0x00	; 0
 3b2:	69 f0       	breq	.+26     	; 0x3ce <DIO_VidSetPinValue+0x6a>
 3b4:	d2 c0       	rjmp	.+420    	; 0x55a <DIO_VidSetPinValue+0x1f6>
 3b6:	2e 81       	ldd	r18, Y+6	; 0x06
 3b8:	3f 81       	ldd	r19, Y+7	; 0x07
 3ba:	22 30       	cpi	r18, 0x02	; 2
 3bc:	31 05       	cpc	r19, r1
 3be:	89 f1       	breq	.+98     	; 0x422 <DIO_VidSetPinValue+0xbe>
 3c0:	8e 81       	ldd	r24, Y+6	; 0x06
 3c2:	9f 81       	ldd	r25, Y+7	; 0x07
 3c4:	83 30       	cpi	r24, 0x03	; 3
 3c6:	91 05       	cpc	r25, r1
 3c8:	09 f4       	brne	.+2      	; 0x3cc <DIO_VidSetPinValue+0x68>
 3ca:	40 c0       	rjmp	.+128    	; 0x44c <DIO_VidSetPinValue+0xe8>
 3cc:	c6 c0       	rjmp	.+396    	; 0x55a <DIO_VidSetPinValue+0x1f6>
			{
				case 0: CLR_BIT(_PORTA,Copy_u8Pin); break;
 3ce:	ab e3       	ldi	r26, 0x3B	; 59
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	eb e3       	ldi	r30, 0x3B	; 59
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	48 2f       	mov	r20, r24
 3da:	8a 81       	ldd	r24, Y+2	; 0x02
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 2e       	mov	r0, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_VidSetPinValue+0x88>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	0a 94       	dec	r0
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_VidSetPinValue+0x84>
 3f0:	80 95       	com	r24
 3f2:	84 23       	and	r24, r20
 3f4:	8c 93       	st	X, r24
 3f6:	b1 c0       	rjmp	.+354    	; 0x55a <DIO_VidSetPinValue+0x1f6>
				case 1: CLR_BIT(_PORTB,Copy_u8Pin); break;
 3f8:	a8 e3       	ldi	r26, 0x38	; 56
 3fa:	b0 e0       	ldi	r27, 0x00	; 0
 3fc:	e8 e3       	ldi	r30, 0x38	; 56
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	48 2f       	mov	r20, r24
 404:	8a 81       	ldd	r24, Y+2	; 0x02
 406:	28 2f       	mov	r18, r24
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 2e       	mov	r0, r18
 410:	02 c0       	rjmp	.+4      	; 0x416 <DIO_VidSetPinValue+0xb2>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	0a 94       	dec	r0
 418:	e2 f7       	brpl	.-8      	; 0x412 <DIO_VidSetPinValue+0xae>
 41a:	80 95       	com	r24
 41c:	84 23       	and	r24, r20
 41e:	8c 93       	st	X, r24
 420:	9c c0       	rjmp	.+312    	; 0x55a <DIO_VidSetPinValue+0x1f6>
				case 2: CLR_BIT(_PORTC,Copy_u8Pin); break;
 422:	a5 e3       	ldi	r26, 0x35	; 53
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	e5 e3       	ldi	r30, 0x35	; 53
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	48 2f       	mov	r20, r24
 42e:	8a 81       	ldd	r24, Y+2	; 0x02
 430:	28 2f       	mov	r18, r24
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	02 2e       	mov	r0, r18
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_VidSetPinValue+0xdc>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	0a 94       	dec	r0
 442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_VidSetPinValue+0xd8>
 444:	80 95       	com	r24
 446:	84 23       	and	r24, r20
 448:	8c 93       	st	X, r24
 44a:	87 c0       	rjmp	.+270    	; 0x55a <DIO_VidSetPinValue+0x1f6>
				case 3: CLR_BIT(_PORTD,Copy_u8Pin); break;
 44c:	a2 e3       	ldi	r26, 0x32	; 50
 44e:	b0 e0       	ldi	r27, 0x00	; 0
 450:	e2 e3       	ldi	r30, 0x32	; 50
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	48 2f       	mov	r20, r24
 458:	8a 81       	ldd	r24, Y+2	; 0x02
 45a:	28 2f       	mov	r18, r24
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 2e       	mov	r0, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_VidSetPinValue+0x106>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	0a 94       	dec	r0
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_VidSetPinValue+0x102>
 46e:	80 95       	com	r24
 470:	84 23       	and	r24, r20
 472:	8c 93       	st	X, r24
 474:	72 c0       	rjmp	.+228    	; 0x55a <DIO_VidSetPinValue+0x1f6>
			}
		}
		else if(1 == Copy_u8Val)
 476:	8b 81       	ldd	r24, Y+3	; 0x03
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	09 f0       	breq	.+2      	; 0x47e <DIO_VidSetPinValue+0x11a>
 47c:	6e c0       	rjmp	.+220    	; 0x55a <DIO_VidSetPinValue+0x1f6>
		{
			switch(Copy_u8Port)
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	28 2f       	mov	r18, r24
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	3d 83       	std	Y+5, r19	; 0x05
 486:	2c 83       	std	Y+4, r18	; 0x04
 488:	8c 81       	ldd	r24, Y+4	; 0x04
 48a:	9d 81       	ldd	r25, Y+5	; 0x05
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	91 05       	cpc	r25, r1
 490:	49 f1       	breq	.+82     	; 0x4e4 <DIO_VidSetPinValue+0x180>
 492:	2c 81       	ldd	r18, Y+4	; 0x04
 494:	3d 81       	ldd	r19, Y+5	; 0x05
 496:	22 30       	cpi	r18, 0x02	; 2
 498:	31 05       	cpc	r19, r1
 49a:	2c f4       	brge	.+10     	; 0x4a6 <DIO_VidSetPinValue+0x142>
 49c:	8c 81       	ldd	r24, Y+4	; 0x04
 49e:	9d 81       	ldd	r25, Y+5	; 0x05
 4a0:	00 97       	sbiw	r24, 0x00	; 0
 4a2:	61 f0       	breq	.+24     	; 0x4bc <DIO_VidSetPinValue+0x158>
 4a4:	5a c0       	rjmp	.+180    	; 0x55a <DIO_VidSetPinValue+0x1f6>
 4a6:	2c 81       	ldd	r18, Y+4	; 0x04
 4a8:	3d 81       	ldd	r19, Y+5	; 0x05
 4aa:	22 30       	cpi	r18, 0x02	; 2
 4ac:	31 05       	cpc	r19, r1
 4ae:	71 f1       	breq	.+92     	; 0x50c <DIO_VidSetPinValue+0x1a8>
 4b0:	8c 81       	ldd	r24, Y+4	; 0x04
 4b2:	9d 81       	ldd	r25, Y+5	; 0x05
 4b4:	83 30       	cpi	r24, 0x03	; 3
 4b6:	91 05       	cpc	r25, r1
 4b8:	e9 f1       	breq	.+122    	; 0x534 <DIO_VidSetPinValue+0x1d0>
 4ba:	4f c0       	rjmp	.+158    	; 0x55a <DIO_VidSetPinValue+0x1f6>
			{
				case 0: SET_BIT(_PORTA,Copy_u8Pin); break;
 4bc:	ab e3       	ldi	r26, 0x3B	; 59
 4be:	b0 e0       	ldi	r27, 0x00	; 0
 4c0:	eb e3       	ldi	r30, 0x3B	; 59
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	48 2f       	mov	r20, r24
 4c8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ca:	28 2f       	mov	r18, r24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 2e       	mov	r0, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_VidSetPinValue+0x176>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	0a 94       	dec	r0
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_VidSetPinValue+0x172>
 4de:	84 2b       	or	r24, r20
 4e0:	8c 93       	st	X, r24
 4e2:	3b c0       	rjmp	.+118    	; 0x55a <DIO_VidSetPinValue+0x1f6>
				case 1: SET_BIT(_PORTB,Copy_u8Pin); break;
 4e4:	a8 e3       	ldi	r26, 0x38	; 56
 4e6:	b0 e0       	ldi	r27, 0x00	; 0
 4e8:	e8 e3       	ldi	r30, 0x38	; 56
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	48 2f       	mov	r20, r24
 4f0:	8a 81       	ldd	r24, Y+2	; 0x02
 4f2:	28 2f       	mov	r18, r24
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 2e       	mov	r0, r18
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_VidSetPinValue+0x19e>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	0a 94       	dec	r0
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_VidSetPinValue+0x19a>
 506:	84 2b       	or	r24, r20
 508:	8c 93       	st	X, r24
 50a:	27 c0       	rjmp	.+78     	; 0x55a <DIO_VidSetPinValue+0x1f6>
				case 2: SET_BIT(_PORTC,Copy_u8Pin); break;
 50c:	a5 e3       	ldi	r26, 0x35	; 53
 50e:	b0 e0       	ldi	r27, 0x00	; 0
 510:	e5 e3       	ldi	r30, 0x35	; 53
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	48 2f       	mov	r20, r24
 518:	8a 81       	ldd	r24, Y+2	; 0x02
 51a:	28 2f       	mov	r18, r24
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	02 2e       	mov	r0, r18
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_VidSetPinValue+0x1c6>
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	0a 94       	dec	r0
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_VidSetPinValue+0x1c2>
 52e:	84 2b       	or	r24, r20
 530:	8c 93       	st	X, r24
 532:	13 c0       	rjmp	.+38     	; 0x55a <DIO_VidSetPinValue+0x1f6>
				case 3: SET_BIT(_PORTD,Copy_u8Pin); break;
 534:	a2 e3       	ldi	r26, 0x32	; 50
 536:	b0 e0       	ldi	r27, 0x00	; 0
 538:	e2 e3       	ldi	r30, 0x32	; 50
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	48 2f       	mov	r20, r24
 540:	8a 81       	ldd	r24, Y+2	; 0x02
 542:	28 2f       	mov	r18, r24
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	02 2e       	mov	r0, r18
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_VidSetPinValue+0x1ee>
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	0a 94       	dec	r0
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_VidSetPinValue+0x1ea>
 556:	84 2b       	or	r24, r20
 558:	8c 93       	st	X, r24
			}
		}
	}
}
 55a:	27 96       	adiw	r28, 0x07	; 7
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	f8 94       	cli
 560:	de bf       	out	0x3e, r29	; 62
 562:	0f be       	out	0x3f, r0	; 63
 564:	cd bf       	out	0x3d, r28	; 61
 566:	cf 91       	pop	r28
 568:	df 91       	pop	r29
 56a:	08 95       	ret

0000056c <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
 56c:	df 93       	push	r29
 56e:	cf 93       	push	r28
 570:	00 d0       	rcall	.+0      	; 0x572 <DIO_U8GetPinValue+0x6>
 572:	00 d0       	rcall	.+0      	; 0x574 <DIO_U8GetPinValue+0x8>
 574:	0f 92       	push	r0
 576:	cd b7       	in	r28, 0x3d	; 61
 578:	de b7       	in	r29, 0x3e	; 62
 57a:	8a 83       	std	Y+2, r24	; 0x02
 57c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Ret_Value;
	
	if(Copy_u8Pin >= 0 && Copy_u8Pin <= 7)
 57e:	8b 81       	ldd	r24, Y+3	; 0x03
 580:	88 30       	cpi	r24, 0x08	; 8
 582:	08 f0       	brcs	.+2      	; 0x586 <DIO_U8GetPinValue+0x1a>
 584:	67 c0       	rjmp	.+206    	; 0x654 <DIO_U8GetPinValue+0xe8>
	{
		switch(Copy_u8Port)
 586:	8a 81       	ldd	r24, Y+2	; 0x02
 588:	28 2f       	mov	r18, r24
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	3d 83       	std	Y+5, r19	; 0x05
 58e:	2c 83       	std	Y+4, r18	; 0x04
 590:	4c 81       	ldd	r20, Y+4	; 0x04
 592:	5d 81       	ldd	r21, Y+5	; 0x05
 594:	41 30       	cpi	r20, 0x01	; 1
 596:	51 05       	cpc	r21, r1
 598:	41 f1       	breq	.+80     	; 0x5ea <DIO_U8GetPinValue+0x7e>
 59a:	8c 81       	ldd	r24, Y+4	; 0x04
 59c:	9d 81       	ldd	r25, Y+5	; 0x05
 59e:	82 30       	cpi	r24, 0x02	; 2
 5a0:	91 05       	cpc	r25, r1
 5a2:	34 f4       	brge	.+12     	; 0x5b0 <DIO_U8GetPinValue+0x44>
 5a4:	2c 81       	ldd	r18, Y+4	; 0x04
 5a6:	3d 81       	ldd	r19, Y+5	; 0x05
 5a8:	21 15       	cp	r18, r1
 5aa:	31 05       	cpc	r19, r1
 5ac:	61 f0       	breq	.+24     	; 0x5c6 <DIO_U8GetPinValue+0x5a>
 5ae:	52 c0       	rjmp	.+164    	; 0x654 <DIO_U8GetPinValue+0xe8>
 5b0:	4c 81       	ldd	r20, Y+4	; 0x04
 5b2:	5d 81       	ldd	r21, Y+5	; 0x05
 5b4:	42 30       	cpi	r20, 0x02	; 2
 5b6:	51 05       	cpc	r21, r1
 5b8:	51 f1       	breq	.+84     	; 0x60e <DIO_U8GetPinValue+0xa2>
 5ba:	8c 81       	ldd	r24, Y+4	; 0x04
 5bc:	9d 81       	ldd	r25, Y+5	; 0x05
 5be:	83 30       	cpi	r24, 0x03	; 3
 5c0:	91 05       	cpc	r25, r1
 5c2:	b9 f1       	breq	.+110    	; 0x632 <DIO_U8GetPinValue+0xc6>
 5c4:	47 c0       	rjmp	.+142    	; 0x654 <DIO_U8GetPinValue+0xe8>
		{
			case 0: Ret_Value = GET_BIT(PINA,Copy_u8Pin); break;
 5c6:	e9 e3       	ldi	r30, 0x39	; 57
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	28 2f       	mov	r18, r24
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	8b 81       	ldd	r24, Y+3	; 0x03
 5d2:	88 2f       	mov	r24, r24
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	a9 01       	movw	r20, r18
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <DIO_U8GetPinValue+0x72>
 5da:	55 95       	asr	r21
 5dc:	47 95       	ror	r20
 5de:	8a 95       	dec	r24
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <DIO_U8GetPinValue+0x6e>
 5e2:	ca 01       	movw	r24, r20
 5e4:	81 70       	andi	r24, 0x01	; 1
 5e6:	89 83       	std	Y+1, r24	; 0x01
 5e8:	35 c0       	rjmp	.+106    	; 0x654 <DIO_U8GetPinValue+0xe8>
			case 1: Ret_Value = GET_BIT(PINB,Copy_u8Pin); break;
 5ea:	e6 e3       	ldi	r30, 0x36	; 54
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	80 81       	ld	r24, Z
 5f0:	28 2f       	mov	r18, r24
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	8b 81       	ldd	r24, Y+3	; 0x03
 5f6:	88 2f       	mov	r24, r24
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	a9 01       	movw	r20, r18
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_U8GetPinValue+0x96>
 5fe:	55 95       	asr	r21
 600:	47 95       	ror	r20
 602:	8a 95       	dec	r24
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_U8GetPinValue+0x92>
 606:	ca 01       	movw	r24, r20
 608:	81 70       	andi	r24, 0x01	; 1
 60a:	89 83       	std	Y+1, r24	; 0x01
 60c:	23 c0       	rjmp	.+70     	; 0x654 <DIO_U8GetPinValue+0xe8>
			case 2: Ret_Value = GET_BIT(PINC,Copy_u8Pin); break;
 60e:	e3 e3       	ldi	r30, 0x33	; 51
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	28 2f       	mov	r18, r24
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	8b 81       	ldd	r24, Y+3	; 0x03
 61a:	88 2f       	mov	r24, r24
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	a9 01       	movw	r20, r18
 620:	02 c0       	rjmp	.+4      	; 0x626 <DIO_U8GetPinValue+0xba>
 622:	55 95       	asr	r21
 624:	47 95       	ror	r20
 626:	8a 95       	dec	r24
 628:	e2 f7       	brpl	.-8      	; 0x622 <DIO_U8GetPinValue+0xb6>
 62a:	ca 01       	movw	r24, r20
 62c:	81 70       	andi	r24, 0x01	; 1
 62e:	89 83       	std	Y+1, r24	; 0x01
 630:	11 c0       	rjmp	.+34     	; 0x654 <DIO_U8GetPinValue+0xe8>
			case 3: Ret_Value = GET_BIT(PIND,Copy_u8Pin); break;
 632:	e0 e3       	ldi	r30, 0x30	; 48
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	80 81       	ld	r24, Z
 638:	28 2f       	mov	r18, r24
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	8b 81       	ldd	r24, Y+3	; 0x03
 63e:	88 2f       	mov	r24, r24
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	a9 01       	movw	r20, r18
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_U8GetPinValue+0xde>
 646:	55 95       	asr	r21
 648:	47 95       	ror	r20
 64a:	8a 95       	dec	r24
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_U8GetPinValue+0xda>
 64e:	ca 01       	movw	r24, r20
 650:	81 70       	andi	r24, 0x01	; 1
 652:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	
	return Ret_Value;
 654:	89 81       	ldd	r24, Y+1	; 0x01
}
 656:	0f 90       	pop	r0
 658:	0f 90       	pop	r0
 65a:	0f 90       	pop	r0
 65c:	0f 90       	pop	r0
 65e:	0f 90       	pop	r0
 660:	cf 91       	pop	r28
 662:	df 91       	pop	r29
 664:	08 95       	ret

00000666 <DIO_VidTogglePinValue>:

void DIO_VidTogglePinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
 666:	df 93       	push	r29
 668:	cf 93       	push	r28
 66a:	00 d0       	rcall	.+0      	; 0x66c <DIO_VidTogglePinValue+0x6>
 66c:	00 d0       	rcall	.+0      	; 0x66e <DIO_VidTogglePinValue+0x8>
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
 672:	89 83       	std	Y+1, r24	; 0x01
 674:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Pin >= 0 && Copy_u8Pin <= 7)
 676:	8a 81       	ldd	r24, Y+2	; 0x02
 678:	88 30       	cpi	r24, 0x08	; 8
 67a:	08 f0       	brcs	.+2      	; 0x67e <DIO_VidTogglePinValue+0x18>
 67c:	6e c0       	rjmp	.+220    	; 0x75a <DIO_VidTogglePinValue+0xf4>
	{
		switch(Copy_u8Port)
 67e:	89 81       	ldd	r24, Y+1	; 0x01
 680:	28 2f       	mov	r18, r24
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	3c 83       	std	Y+4, r19	; 0x04
 686:	2b 83       	std	Y+3, r18	; 0x03
 688:	8b 81       	ldd	r24, Y+3	; 0x03
 68a:	9c 81       	ldd	r25, Y+4	; 0x04
 68c:	81 30       	cpi	r24, 0x01	; 1
 68e:	91 05       	cpc	r25, r1
 690:	49 f1       	breq	.+82     	; 0x6e4 <DIO_VidTogglePinValue+0x7e>
 692:	2b 81       	ldd	r18, Y+3	; 0x03
 694:	3c 81       	ldd	r19, Y+4	; 0x04
 696:	22 30       	cpi	r18, 0x02	; 2
 698:	31 05       	cpc	r19, r1
 69a:	2c f4       	brge	.+10     	; 0x6a6 <DIO_VidTogglePinValue+0x40>
 69c:	8b 81       	ldd	r24, Y+3	; 0x03
 69e:	9c 81       	ldd	r25, Y+4	; 0x04
 6a0:	00 97       	sbiw	r24, 0x00	; 0
 6a2:	61 f0       	breq	.+24     	; 0x6bc <DIO_VidTogglePinValue+0x56>
 6a4:	5a c0       	rjmp	.+180    	; 0x75a <DIO_VidTogglePinValue+0xf4>
 6a6:	2b 81       	ldd	r18, Y+3	; 0x03
 6a8:	3c 81       	ldd	r19, Y+4	; 0x04
 6aa:	22 30       	cpi	r18, 0x02	; 2
 6ac:	31 05       	cpc	r19, r1
 6ae:	71 f1       	breq	.+92     	; 0x70c <DIO_VidTogglePinValue+0xa6>
 6b0:	8b 81       	ldd	r24, Y+3	; 0x03
 6b2:	9c 81       	ldd	r25, Y+4	; 0x04
 6b4:	83 30       	cpi	r24, 0x03	; 3
 6b6:	91 05       	cpc	r25, r1
 6b8:	e9 f1       	breq	.+122    	; 0x734 <DIO_VidTogglePinValue+0xce>
 6ba:	4f c0       	rjmp	.+158    	; 0x75a <DIO_VidTogglePinValue+0xf4>
		{
			case 0: Toggle_BIT(_PORTA,Copy_u8Pin); break;
 6bc:	ab e3       	ldi	r26, 0x3B	; 59
 6be:	b0 e0       	ldi	r27, 0x00	; 0
 6c0:	eb e3       	ldi	r30, 0x3B	; 59
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	80 81       	ld	r24, Z
 6c6:	48 2f       	mov	r20, r24
 6c8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ca:	28 2f       	mov	r18, r24
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	02 2e       	mov	r0, r18
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_VidTogglePinValue+0x74>
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	0a 94       	dec	r0
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_VidTogglePinValue+0x70>
 6de:	84 27       	eor	r24, r20
 6e0:	8c 93       	st	X, r24
 6e2:	3b c0       	rjmp	.+118    	; 0x75a <DIO_VidTogglePinValue+0xf4>
			case 1: Toggle_BIT(_PORTB,Copy_u8Pin); break;
 6e4:	a8 e3       	ldi	r26, 0x38	; 56
 6e6:	b0 e0       	ldi	r27, 0x00	; 0
 6e8:	e8 e3       	ldi	r30, 0x38	; 56
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	48 2f       	mov	r20, r24
 6f0:	8a 81       	ldd	r24, Y+2	; 0x02
 6f2:	28 2f       	mov	r18, r24
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	02 2e       	mov	r0, r18
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_VidTogglePinValue+0x9c>
 6fe:	88 0f       	add	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	0a 94       	dec	r0
 704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_VidTogglePinValue+0x98>
 706:	84 27       	eor	r24, r20
 708:	8c 93       	st	X, r24
 70a:	27 c0       	rjmp	.+78     	; 0x75a <DIO_VidTogglePinValue+0xf4>
			case 2: Toggle_BIT(_PORTC,Copy_u8Pin); break;
 70c:	a5 e3       	ldi	r26, 0x35	; 53
 70e:	b0 e0       	ldi	r27, 0x00	; 0
 710:	e5 e3       	ldi	r30, 0x35	; 53
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	48 2f       	mov	r20, r24
 718:	8a 81       	ldd	r24, Y+2	; 0x02
 71a:	28 2f       	mov	r18, r24
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	02 2e       	mov	r0, r18
 724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_VidTogglePinValue+0xc4>
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	0a 94       	dec	r0
 72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_VidTogglePinValue+0xc0>
 72e:	84 27       	eor	r24, r20
 730:	8c 93       	st	X, r24
 732:	13 c0       	rjmp	.+38     	; 0x75a <DIO_VidTogglePinValue+0xf4>
			case 3: Toggle_BIT(_PORTD,Copy_u8Pin); break;
 734:	a2 e3       	ldi	r26, 0x32	; 50
 736:	b0 e0       	ldi	r27, 0x00	; 0
 738:	e2 e3       	ldi	r30, 0x32	; 50
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	80 81       	ld	r24, Z
 73e:	48 2f       	mov	r20, r24
 740:	8a 81       	ldd	r24, Y+2	; 0x02
 742:	28 2f       	mov	r18, r24
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	02 2e       	mov	r0, r18
 74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_VidTogglePinValue+0xec>
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	0a 94       	dec	r0
 754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_VidTogglePinValue+0xe8>
 756:	84 27       	eor	r24, r20
 758:	8c 93       	st	X, r24
		}		
	}
}
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	cf 91       	pop	r28
 764:	df 91       	pop	r29
 766:	08 95       	ret

00000768 <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Val)
{
 768:	df 93       	push	r29
 76a:	cf 93       	push	r28
 76c:	00 d0       	rcall	.+0      	; 0x76e <DIO_VidSetPortDirection+0x6>
 76e:	00 d0       	rcall	.+0      	; 0x770 <DIO_VidSetPortDirection+0x8>
 770:	cd b7       	in	r28, 0x3d	; 61
 772:	de b7       	in	r29, 0x3e	; 62
 774:	89 83       	std	Y+1, r24	; 0x01
 776:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
 778:	89 81       	ldd	r24, Y+1	; 0x01
 77a:	28 2f       	mov	r18, r24
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	3c 83       	std	Y+4, r19	; 0x04
 780:	2b 83       	std	Y+3, r18	; 0x03
 782:	8b 81       	ldd	r24, Y+3	; 0x03
 784:	9c 81       	ldd	r25, Y+4	; 0x04
 786:	81 30       	cpi	r24, 0x01	; 1
 788:	91 05       	cpc	r25, r1
 78a:	d1 f0       	breq	.+52     	; 0x7c0 <DIO_VidSetPortDirection+0x58>
 78c:	2b 81       	ldd	r18, Y+3	; 0x03
 78e:	3c 81       	ldd	r19, Y+4	; 0x04
 790:	22 30       	cpi	r18, 0x02	; 2
 792:	31 05       	cpc	r19, r1
 794:	2c f4       	brge	.+10     	; 0x7a0 <DIO_VidSetPortDirection+0x38>
 796:	8b 81       	ldd	r24, Y+3	; 0x03
 798:	9c 81       	ldd	r25, Y+4	; 0x04
 79a:	00 97       	sbiw	r24, 0x00	; 0
 79c:	61 f0       	breq	.+24     	; 0x7b6 <DIO_VidSetPortDirection+0x4e>
 79e:	1e c0       	rjmp	.+60     	; 0x7dc <DIO_VidSetPortDirection+0x74>
 7a0:	2b 81       	ldd	r18, Y+3	; 0x03
 7a2:	3c 81       	ldd	r19, Y+4	; 0x04
 7a4:	22 30       	cpi	r18, 0x02	; 2
 7a6:	31 05       	cpc	r19, r1
 7a8:	81 f0       	breq	.+32     	; 0x7ca <DIO_VidSetPortDirection+0x62>
 7aa:	8b 81       	ldd	r24, Y+3	; 0x03
 7ac:	9c 81       	ldd	r25, Y+4	; 0x04
 7ae:	83 30       	cpi	r24, 0x03	; 3
 7b0:	91 05       	cpc	r25, r1
 7b2:	81 f0       	breq	.+32     	; 0x7d4 <DIO_VidSetPortDirection+0x6c>
 7b4:	13 c0       	rjmp	.+38     	; 0x7dc <DIO_VidSetPortDirection+0x74>
	{
		case 0: DDRA = Copy_u8Val; break;
 7b6:	ea e3       	ldi	r30, 0x3A	; 58
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	8a 81       	ldd	r24, Y+2	; 0x02
 7bc:	80 83       	st	Z, r24
 7be:	0e c0       	rjmp	.+28     	; 0x7dc <DIO_VidSetPortDirection+0x74>
		case 1: DDRB = Copy_u8Val; break;
 7c0:	e7 e3       	ldi	r30, 0x37	; 55
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	8a 81       	ldd	r24, Y+2	; 0x02
 7c6:	80 83       	st	Z, r24
 7c8:	09 c0       	rjmp	.+18     	; 0x7dc <DIO_VidSetPortDirection+0x74>
		case 2: DDRC = Copy_u8Val; break;
 7ca:	e4 e3       	ldi	r30, 0x34	; 52
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	8a 81       	ldd	r24, Y+2	; 0x02
 7d0:	80 83       	st	Z, r24
 7d2:	04 c0       	rjmp	.+8      	; 0x7dc <DIO_VidSetPortDirection+0x74>
		case 3: DDRD = Copy_u8Val; break;
 7d4:	e1 e3       	ldi	r30, 0x31	; 49
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	8a 81       	ldd	r24, Y+2	; 0x02
 7da:	80 83       	st	Z, r24
	}
}
 7dc:	0f 90       	pop	r0
 7de:	0f 90       	pop	r0
 7e0:	0f 90       	pop	r0
 7e2:	0f 90       	pop	r0
 7e4:	cf 91       	pop	r28
 7e6:	df 91       	pop	r29
 7e8:	08 95       	ret

000007ea <DIO_VidSetPortValue>:

void DIO_VidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Val)
{
 7ea:	df 93       	push	r29
 7ec:	cf 93       	push	r28
 7ee:	00 d0       	rcall	.+0      	; 0x7f0 <DIO_VidSetPortValue+0x6>
 7f0:	00 d0       	rcall	.+0      	; 0x7f2 <DIO_VidSetPortValue+0x8>
 7f2:	cd b7       	in	r28, 0x3d	; 61
 7f4:	de b7       	in	r29, 0x3e	; 62
 7f6:	89 83       	std	Y+1, r24	; 0x01
 7f8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
 7fa:	89 81       	ldd	r24, Y+1	; 0x01
 7fc:	28 2f       	mov	r18, r24
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	3c 83       	std	Y+4, r19	; 0x04
 802:	2b 83       	std	Y+3, r18	; 0x03
 804:	8b 81       	ldd	r24, Y+3	; 0x03
 806:	9c 81       	ldd	r25, Y+4	; 0x04
 808:	81 30       	cpi	r24, 0x01	; 1
 80a:	91 05       	cpc	r25, r1
 80c:	d1 f0       	breq	.+52     	; 0x842 <DIO_VidSetPortValue+0x58>
 80e:	2b 81       	ldd	r18, Y+3	; 0x03
 810:	3c 81       	ldd	r19, Y+4	; 0x04
 812:	22 30       	cpi	r18, 0x02	; 2
 814:	31 05       	cpc	r19, r1
 816:	2c f4       	brge	.+10     	; 0x822 <DIO_VidSetPortValue+0x38>
 818:	8b 81       	ldd	r24, Y+3	; 0x03
 81a:	9c 81       	ldd	r25, Y+4	; 0x04
 81c:	00 97       	sbiw	r24, 0x00	; 0
 81e:	61 f0       	breq	.+24     	; 0x838 <DIO_VidSetPortValue+0x4e>
 820:	1e c0       	rjmp	.+60     	; 0x85e <DIO_VidSetPortValue+0x74>
 822:	2b 81       	ldd	r18, Y+3	; 0x03
 824:	3c 81       	ldd	r19, Y+4	; 0x04
 826:	22 30       	cpi	r18, 0x02	; 2
 828:	31 05       	cpc	r19, r1
 82a:	81 f0       	breq	.+32     	; 0x84c <DIO_VidSetPortValue+0x62>
 82c:	8b 81       	ldd	r24, Y+3	; 0x03
 82e:	9c 81       	ldd	r25, Y+4	; 0x04
 830:	83 30       	cpi	r24, 0x03	; 3
 832:	91 05       	cpc	r25, r1
 834:	81 f0       	breq	.+32     	; 0x856 <DIO_VidSetPortValue+0x6c>
 836:	13 c0       	rjmp	.+38     	; 0x85e <DIO_VidSetPortValue+0x74>
	{
		case 0: _PORTA = Copy_u8Val; break;
 838:	eb e3       	ldi	r30, 0x3B	; 59
 83a:	f0 e0       	ldi	r31, 0x00	; 0
 83c:	8a 81       	ldd	r24, Y+2	; 0x02
 83e:	80 83       	st	Z, r24
 840:	0e c0       	rjmp	.+28     	; 0x85e <DIO_VidSetPortValue+0x74>
		case 1: _PORTB = Copy_u8Val; break;
 842:	e8 e3       	ldi	r30, 0x38	; 56
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	8a 81       	ldd	r24, Y+2	; 0x02
 848:	80 83       	st	Z, r24
 84a:	09 c0       	rjmp	.+18     	; 0x85e <DIO_VidSetPortValue+0x74>
		case 2: _PORTC = Copy_u8Val; break;
 84c:	e5 e3       	ldi	r30, 0x35	; 53
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	8a 81       	ldd	r24, Y+2	; 0x02
 852:	80 83       	st	Z, r24
 854:	04 c0       	rjmp	.+8      	; 0x85e <DIO_VidSetPortValue+0x74>
		case 3: _PORTD = Copy_u8Val; break;
 856:	e2 e3       	ldi	r30, 0x32	; 50
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	8a 81       	ldd	r24, Y+2	; 0x02
 85c:	80 83       	st	Z, r24
	}
 85e:	0f 90       	pop	r0
 860:	0f 90       	pop	r0
 862:	0f 90       	pop	r0
 864:	0f 90       	pop	r0
 866:	cf 91       	pop	r28
 868:	df 91       	pop	r29
 86a:	08 95       	ret

0000086c <main>:
#define GreenLed	4

#define pot			0

int main()
{
 86c:	df 93       	push	r29
 86e:	cf 93       	push	r28
 870:	cd b7       	in	r28, 0x3d	; 61
 872:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(PORTC, 0, OUTPUT);
 874:	82 e0       	ldi	r24, 0x02	; 2
 876:	60 e0       	ldi	r22, 0x00	; 0
 878:	41 e0       	ldi	r20, 0x01	; 1
 87a:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORTC, 1, OUTPUT);
 87e:	82 e0       	ldi	r24, 0x02	; 2
 880:	61 e0       	ldi	r22, 0x01	; 1
 882:	41 e0       	ldi	r20, 0x01	; 1
 884:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORTC, 2, OUTPUT);
 888:	82 e0       	ldi	r24, 0x02	; 2
 88a:	62 e0       	ldi	r22, 0x02	; 2
 88c:	41 e0       	ldi	r20, 0x01	; 1
 88e:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_VidSetPinDirection>

	ADC_VidInit();
 892:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_VidInit>

	while(1)
	{
		if(ADC_U16ReadData(pot) <= 341)
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	0e 94 83 00 	call	0x106	; 0x106 <ADC_U16ReadData>
 89c:	21 e0       	ldi	r18, 0x01	; 1
 89e:	86 35       	cpi	r24, 0x56	; 86
 8a0:	92 07       	cpc	r25, r18
 8a2:	28 f4       	brcc	.+10     	; 0x8ae <main+0x42>
		{
			DIO_VidSetPortValue(PORTC, RedLed);
 8a4:	82 e0       	ldi	r24, 0x02	; 2
 8a6:	61 e0       	ldi	r22, 0x01	; 1
 8a8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <DIO_VidSetPortValue>
 8ac:	f4 cf       	rjmp	.-24     	; 0x896 <main+0x2a>
		}
		else if(ADC_U16ReadData(pot) > 341 && ADC_U16ReadData(pot) <= 682)
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	0e 94 83 00 	call	0x106	; 0x106 <ADC_U16ReadData>
 8b4:	21 e0       	ldi	r18, 0x01	; 1
 8b6:	86 35       	cpi	r24, 0x56	; 86
 8b8:	92 07       	cpc	r25, r18
 8ba:	60 f0       	brcs	.+24     	; 0x8d4 <main+0x68>
 8bc:	80 e0       	ldi	r24, 0x00	; 0
 8be:	0e 94 83 00 	call	0x106	; 0x106 <ADC_U16ReadData>
 8c2:	22 e0       	ldi	r18, 0x02	; 2
 8c4:	8b 3a       	cpi	r24, 0xAB	; 171
 8c6:	92 07       	cpc	r25, r18
 8c8:	28 f4       	brcc	.+10     	; 0x8d4 <main+0x68>
		{
			DIO_VidSetPortValue(PORTC, YellowLed);
 8ca:	82 e0       	ldi	r24, 0x02	; 2
 8cc:	62 e0       	ldi	r22, 0x02	; 2
 8ce:	0e 94 f5 03 	call	0x7ea	; 0x7ea <DIO_VidSetPortValue>
 8d2:	e1 cf       	rjmp	.-62     	; 0x896 <main+0x2a>
		}
		else
		{
			DIO_VidSetPortValue(PORTC, GreenLed);
 8d4:	82 e0       	ldi	r24, 0x02	; 2
 8d6:	64 e0       	ldi	r22, 0x04	; 4
 8d8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <DIO_VidSetPortValue>
 8dc:	dc cf       	rjmp	.-72     	; 0x896 <main+0x2a>

000008de <_exit>:
 8de:	f8 94       	cli

000008e0 <__stop_program>:
 8e0:	ff cf       	rjmp	.-2      	; 0x8e0 <__stop_program>
